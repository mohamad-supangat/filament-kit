<?php

use Carbon\Carbon;
use Carbon\CarbonPeriod;

/**
 * melakukan format angka menjadi format ribuan di indonesia dengan auto deteksi desimal
 * ribuan dengan .
 * dan decimal dengan ,.
 */
function money_format($number)
{
    $number_str = strval($number);
    $parts      = explode('.', $number_str);
    $decimal    = count($parts) > 1 ? strlen($parts[1]) : 0;

    return number_format($number, $decimal, ',', '.');
}

function listMonth($monthFormat = 'F', $reverseKey = false)
{
    $months           = CarbonPeriod::create('2019-01-01', '1 month', '2019-12-31');
    $translatedMonths = [];
    foreach ($months as $month) {
        if (!$reverseKey) {
            $translatedMonths[$month->format('m')] = $month->translatedFormat($monthFormat);
        } else {
            $translatedMonths[$month->translatedFormat($monthFormat)] = $month->format('m');
        }
    }

    return $translatedMonths;
}

function list_tahun()
{
    $listTahun     = [];
    $tahunMulai    = 2020;
    $tahunBerjalan = date('Y');

    for ($tahunBerjalan; $tahunBerjalan >= $tahunMulai; --$tahunBerjalan) {
        $listTahun[] = $tahunBerjalan;
    }

    return $listTahun;
}


/**
 * fungsi untuk mengahpus prefix pada string
 *
 * @param  $string
 * @param  $prefix
 * @return
 */
function removePrefix(string $string, string $prefix): string
{
    if (substr($string, 0, strlen($prefix)) === $prefix) {
        $string = substr($string, strlen($prefix));
    }
    return $string;
}



/**
 * fungsi untuk parsing date dari string ke carbon
 * sering di gunakan ektika ada string dari bahasa indonesia
 *
 * @param  $date
 */
function parseDate(?string $date)
{
    if (!$date || $date == '' || $date == ' ') {
        return;
    }


    $monthsMap = [
        ...listMonth(reverseKey: true),
        ...listMonth(reverseKey: true, monthFormat: 'M')
    ];


    try {
        // lakukan formar jika  Sabtu, 04 Mei 2024
        // generated by gemmini

        // Split the date string into its components (assuming Indonesian format)
        $dateParts = explode(' ', $date);
        $day       = $dateParts[1];
        $month     = $dateParts[2];
        $year      = $dateParts[3];


        // jika di temukan bulan pada array map indonesia maka jadikan bulan menjadi nilai key bulan
        if (isset($monthsMap[$month])) {
            $month = $monthsMap[$month];
        }


        // Create a Carbon instance with the parsed date and set time to midnight
        $carbon = Carbon::create($year, $month, $day, 0, 0, 0, 'Asia/Jakarta');
        return $carbon;
    } catch (\Throwable $th) {
        try {
            $date = \PhpOffice\PhpSpreadsheet\Shared\Date::excelToDateTimeObject($date);

            $carbon = Carbon::parse($date);
            return $carbon;
        } catch (\Throwable $th) {
            dd($date);
            throw $th;
        }
        // throw $th;
    }
}
